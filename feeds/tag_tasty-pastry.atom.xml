<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adriana Patterson Ip - Tasty Pastry</title><link href="/" rel="alternate"></link><link href="feeds/tag_tasty-pastry.atom.xml" rel="self"></link><id>/</id><updated>2019-09-05T00:00:00+02:00</updated><subtitle>Science || Coding || Baking</subtitle><entry><title>Deploying Wagtail on heroku</title><link href="blog/2019/09/05/deplying-wagtail-on-heroku/" rel="alternate"></link><published>2019-09-05T00:00:00+02:00</published><updated>2019-09-05T00:00:00+02:00</updated><author><name>Adriana</name></author><id>tag:None,2019-09-05:blog/2019/09/05/deplying-wagtail-on-heroku/</id><summary type="html">&lt;p&gt;How I deployed wagtail as my cms for my baking blog&lt;/p&gt;</summary><content type="html">&lt;p&gt;Everything was running fine locally, I was able to get wagtail's CMS up and running from their &lt;a href="http://docs.wagtail.io/en/v2.6.1/getting_started/tutorial.html"&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I was convinced that I had all the components of wagtail's cms intact (uploading images, templates looking nice, blog index page figured out) I attempted to move everything up to my staging environment. It was semi-catastrophic. (Which BTW is why I love having this testing environment) &lt;/p&gt;
&lt;p&gt;The first error I received when I pushed everything to my staging server was the heroku "application error" page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="heroku error page" src="../../../../../img/heroku_error.png"&gt;&lt;/p&gt;
&lt;p&gt;was telling me:&lt;/p&gt;
&lt;p&gt;ModuleNotFoundError: No module named 'wagtail' Exception&lt;/p&gt;
&lt;p&gt;I was really scratching my head over this one. I clearly had the wagtail module installed on my local environment because I was working fine with it, updating posts and everything. Turns out I neglected to download a package called:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/django-toolbelt/"&gt;django-toolbelt&lt;/a&gt;, which will properly install all the packages required for running a django project on heroku. &lt;/p&gt;
&lt;p&gt;I then attempted to load my page, and was presented with:&lt;/p&gt;
&lt;p&gt;Server Error (500)&lt;/p&gt;
&lt;p&gt;That's it, nothing else on the page.&lt;/p&gt;
&lt;p&gt;I took this in an exercise to get better at diagnostics. I realized that I am not anywhere close to being able indentify hints to see where the issues lie. At this point, I wasn't even sure where to look. &lt;/p&gt;
&lt;p&gt;I learned two ways to diagnose errors. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first was using logentries through my heroku account. This, however, yeilded the same information:&lt;/p&gt;
&lt;p&gt;&lt;img alt="heroku fatal" src="../../../../../img/heroku_fatal.png"&gt; 
The same 500's errors that don't tell me anything at all!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Turning on DEBUG=TRUE in my settings.py (duh)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I realize that I messed with this setting for so long, adding a secret key and whatever, but completely forgot that this was an option. This one yeilded me the most information because django really goes into line by line details for the errors, which was described as:&lt;/p&gt;
&lt;p&gt;ProgrammingError relation "wagtailcore_site" does not exist&lt;/p&gt;
&lt;p&gt;This one I had to dive deep because I'm still learning the ropes here. When I saw the word 'relation' I knew it had to be my database. I decided to go back and explore my settings.py file, and saw that I still had my SQLite3 database installed. ü§¶üèª‚Äç‚ôÄÔ∏è&lt;/p&gt;
&lt;p&gt;I've messed up this site before. Past the point of no return, and rebuilt it from the ground up. In doing so, I thought that I had changed my database over to something else, anything else other SQLite3, but apparently I forgot that step. It probably didn't make a difference though because I was not storing anything in the database yet, nor was it launched to my production server.&lt;/p&gt;
&lt;p&gt;So, I migrated what little data I had created with my blog information into a postgreSQL database. It was much more straightforward than I thought it would be. I just followed these instructions: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/sirodoht/f598d14e9644e2d3909629a41e3522ad"&gt;How to migrate Django from SQLite to postgreSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;but I had to add one step due to an error that my database had foreign key contraints:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TRUNCATE django_content_type CASCADE;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and while this seemed to move everyting perfectly to a new postgreSQL database beautifully and I was able to see all my posts locally, my staging server was still giving me errors. &lt;/p&gt;
&lt;p&gt;This part is what took me the longest, but is perhaps the most important thing I learned during this process:&lt;/p&gt;
&lt;p&gt;how to run bash on my staging servers!&lt;/p&gt;
&lt;p&gt;Honestly, something I was unaware that I could do but game changing. It just puts everything in perspective for me: the virtual environment, and how heroku imitates this environment to serve my application that I built. So in essense, everyting that I was doing here locally, would have to be done identically on their server to get the same results. I finally understood what "ProgrammingError relation "wagtailcore_site" does not exist" meant. Heroku can't find my database/data!&lt;/p&gt;
&lt;p&gt;This post on &lt;a href="https://stackoverflow.com/questions/38134535/django-on-heroku-relation-does-not-exist"&gt;migrating using bash on the hosting servers really was a üí°&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was able to execute the same commands I did locally, installing the database and migrating the data for my staging server. And it works. I now have a cms functioning for my site, held together with hope and duct tape.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;p&gt;Coding for Everybody's &lt;a href="https://www.youtube.com/watch?v=RQ0eKv6HrpM"&gt;How to deploy Wagtail using Heroku&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wagtails' blog post on &lt;a href="https://wagtail.io/blog/wagtail-heroku-2017/"&gt;heroku deployment&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Django"></category><category term="Tasty Pastry"></category><category term="Wagtail"></category><category term="Heroku"></category></entry><entry><title>Wagtail for my Tasty Pastry blog</title><link href="blog/2019/08/01/wagtail-for-my-tasty-pastry-blog/" rel="alternate"></link><published>2019-08-01T00:00:00+02:00</published><updated>2019-08-01T00:00:00+02:00</updated><author><name>Adriana</name></author><id>tag:None,2019-08-01:blog/2019/08/01/wagtail-for-my-tasty-pastry-blog/</id><summary type="html">&lt;p&gt;How I came to choose wagtail as a cms, and some useful references I've collected&lt;/p&gt;</summary><content type="html">&lt;p&gt;I started Tasty Pastry by coding the html/css manually (and pretty crappily at that) but as a means to figure out the mechanics of my site. I knew I wanted an interactive cooking app, but I also wanted a blog feature. In the beginning, it was not clear if these were two seperate apps in the Tasty Pastry project. In my mind, all things could be considered a 'blog post', but not all blog posts would belong in the interactive cooking app. For instance, consider a write up that compares pie pan types. Where would such information belong?&lt;/p&gt;
&lt;p&gt;I decided to put aside the interactive cooking app and start first with developing an app to create and categorize blog posts.&lt;/p&gt;
&lt;p&gt;As I started writing 'blog posts', I figured out some sort of generic layout that I was happy with. I would come up with a recipe in Notion to  maintain my files and references, and then manually move that content into hand written html files. Recipes follow a basic format: a block of text for the introduction, a table for ingredients, and a list for intructions. &lt;/p&gt;
&lt;p&gt;Copying and pasting got real tedious, real fast.&lt;/p&gt;
&lt;p&gt;It was time to move onto a content management system (cms) to maintain my files. &lt;/p&gt;
&lt;p&gt;I'm aware of different established popular cms's: wordpress, etc. However. I'm a complicated creature. I have this tendancy to try to combine everything I know into a single project as to potentially yield the best/most efficient set of results. ü§î&lt;/p&gt;
&lt;p&gt;If I were keen on learning how to bake really well, I would just go with wordpress, or squarespace, and focus on my writing and baking. But, I'm also interested in becoming a better programmer. So let's combine the two and design this damn thing from the ground up! &lt;/p&gt;
&lt;p&gt;My thinking behind this is that eventually, I will want to have more control over Tasty Pastry. That is, I'm not planning on it being just a baking blog. There are plenty of great ones out there already, and I feel I can leverage my skills in a unique way. &lt;/p&gt;
&lt;p&gt;I went with wagtail for a couple of reasons. It was &lt;a href="https://hellowebbooks.com/news/moved-hellowebbookscom-static-site-generator-full-django-site/"&gt;suggested by Hello Web App author Tracy Osborn&lt;/a&gt; so I just went and started downloading the packages. Once I realized how simple it was to get it up and working (I knew a little about Django at that point) I just kept going.&lt;/p&gt;
&lt;p&gt;It took me about a day to get it working within my project, and to get the models and templates written.&lt;/p&gt;
&lt;p&gt;Working with an app that already has lots of documentation allows me to understand the django framework a little better - how models work with templates, and how data is stored and retrieved in terms of managing content. &lt;/p&gt;
&lt;p&gt;If you're looking for a CMS that has good documentation, from a beginner's perspective, this may be a place to start. &lt;/p&gt;
&lt;h3 id="here-are-some-good-references-that-may-help-you-along-your-wagtail-journey"&gt;Here are some good references that may help you along your wagtail journey:&lt;a class="headerlink" href="#here-are-some-good-references-that-may-help-you-along-your-wagtail-journey" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.accordbox.com/blog/wagtail-tutorials-building-blog-part-2/"&gt;I found these tutorials sometimes more helpful than the official wagtail documentation.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCwbsAsY_C6EmGI6_JHhECEQ"&gt;Coding for Everybody also has some excellent wagtail video tutorials.&lt;/a&gt; I really enjoy his laid-back teaching style and he tends to explain things pretty thoroughly. Highly recommend. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.wagtail.io/en/latest/topics/streamfield.html#streamfield"&gt;I use streamfield blocks for my editing interface.&lt;/a&gt; It just gives me more flexiblity with the types of content I want to post.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/springload/awesome-wagtail#bloggingnews"&gt;A github awesome list&lt;/a&gt; containing different packages you can add to your wagtail interface and other cool resources that the wagtail community has built.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wagtail/wagtail"&gt;The github repo containing the source code for wagtail.&lt;/a&gt; Here I was able to find some html files that I needed in order to customize my blog. For instance, I altered the table.html file for my recipe ingredients tables so that they functioned in the way I wanted: checkboxes before every ingredient, etc.&lt;/p&gt;</content><category term="Python"></category><category term="Django"></category><category term="Tasty Pastry"></category></entry><entry><title>Tasty Pastry is live</title><link href="blog/2019/07/14/tasty-pastry-live/" rel="alternate"></link><published>2019-07-14T00:00:00+02:00</published><updated>2019-07-14T00:00:00+02:00</updated><author><name>Adriana</name></author><id>tag:None,2019-07-14:blog/2019/07/14/tasty-pastry-live/</id><summary type="html">&lt;p&gt;Some background machanics of how I use heroku for my django app&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've hit another milestone and finally made my website live. After weeks of figuring out how I want to present my recipes, and what my plans are for the site, it was finally ready to push out to the production server. &lt;/p&gt;
&lt;p&gt;I've learned quite a bit along the way, and though most of it is specific to django app development (which I believe I have just scratched the surface) I try to make some abstract observations about processes and learning in general. It is my way of making connections between topics and possibly apply ideas across disciplines. I find I can learn many things this way.&lt;/p&gt;
&lt;p&gt;That's not to say that I am quick at learning. That is farther from the truth. But, I do believe that I have a higher tolerance for learning new things, in that I will easily pick up many things up at once and try lots of things to figure out what I like. &lt;/p&gt;
&lt;p&gt;Anyway. The main theme that keeps running through my mind as I attempt to learn django/python/app development, is this: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;work&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;(from &lt;a href="https://www.biostarhandbook.com/index.html"&gt;the Biostar Handbook&lt;/a&gt; and bioinformatics pipelines)&lt;/p&gt;
&lt;p&gt;I think #1 is the most difficult hurdle to overcome and is often where most people (including myself) give up. &lt;/p&gt;
&lt;p&gt;But I love the way that the biostarhandbook describes #1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"...get the entire process moving - not just the beginning - the whole thing. It will be hacky, it will be squeaky, it may need to be held together with duct tape. Go all the way!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because of this, every project that I think about putting together something, even if it is held together by duct tape. (Quite literally - I put together a drip irrigation setup for my garden and the inital pvc piping was indeed held together by duct tape.)&lt;/p&gt;
&lt;p&gt;I think it's so tempting to want something polished, finished and beautiful at the getgo, but how many times is ever possible?&lt;/p&gt;
&lt;p&gt;So the site is up. There is duct tape remaining on some parts, but it's up. &lt;/p&gt;
&lt;p&gt;Onwards and upwards to #2 (make it fast) and #3 (make it simple).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What I'm really digging about app development are all the checkpoints. The scientist in me is appreciating that there are different stages of development to prevent and debug errors. (If only bench research had this sort of feature...)&lt;/p&gt;
&lt;p&gt;You have various environments to run your app before it becomes live. First, locally on your machine, then onto a staging environment online, and then onto your production, or live site. Within each of these steps you can add even more checkpoints, like branches using git on your local environment. &lt;/p&gt;
&lt;p&gt;It took some time for me to learn the commands and general workarounds, but I have a somewhat good understanding. At least, enough to go back and fix things if I break something on the app. &lt;/p&gt;
&lt;p&gt;Here is my pipeline on how I push to heroku using git:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Verify that all pages are presenting correctly. Click on the recently updated pages to make sure there are no errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check to see if the site is mobile friendly:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/code&gt; allows you to access the site on your network, check your computer's IP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prepare your static files for deployment&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3 manage.py collectstatic&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit all changes to your working branch, pushing to master if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using heroku CLI, you can check to see what apps you have (sometimes I forget what I named them)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;heroku apps&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push to heroku's branch your latest commits. For instance, I named my remote heroku branch for staging "staging", and I have all my recent changes commited to my master.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push staging master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When (there is never an 'if') there are errors&lt;/p&gt;
&lt;p&gt;&lt;code&gt;heroku log --tail --remote staging&lt;/code&gt;
If however this is not helpful, you can try logentries (info from &lt;a href="https://stackoverflow.com/questions/19410811/how-do-you-diagnose-a-500-error-on-heroku-when-there-is-no-error-message-in-the"&gt;this stackoverflow answer&lt;/a&gt;).
This helps me diagnose by giving more details on my errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the staging looks good, you can push your commits to the live server, which is called "prod" in my case:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push prod master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.tastypastry.kitchen/"&gt;Updates&lt;/a&gt; are now live! Onto the next issue...&lt;/p&gt;</content><category term="Python"></category><category term="Django"></category><category term="Tasty Pastry"></category></entry></feed>