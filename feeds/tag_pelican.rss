<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Adriana Patterson Ip - Pelican</title><link>/</link><description>Science || Coding || Baking</description><lastBuildDate>Thu, 13 Jun 2019 00:00:00 +0200</lastBuildDate><item><title>Why I chose Pelican and how I update blog posts</title><link>blog/2019/06/13/pelican-sites-and-creating-blogposts/</link><description>&lt;p&gt;I've explored creating all kinds of websites.  &lt;/p&gt;
&lt;p&gt;It began years ago with a Geocities site (!!) that I made when I had my wisdom teeth pulled and I didn't want to leave my room. Since then, I've created sites using: Tumbler, Blogger, Wordpress, HuGo, Squarespace, a Pelican-generated site and a Python-Django site. I'm sure I've left some out. &lt;/p&gt;
&lt;p&gt;I am by no means an expert. Until recently, it's been more of a light hobby than a necessity. &lt;/p&gt;
&lt;p&gt;Eventually, I needed something for my &lt;a href="www.dranalytics.co"&gt;consulting business&lt;/a&gt; and I now I've gone the personal route because it didn't seem appropriate to write about making lemon curd alongside recent news on DNA sequence alignment software.&lt;/p&gt;
&lt;p&gt;For my company I chose squarespace, which is just lovely and easy to set up.&lt;/p&gt;
&lt;p&gt;I chose to go with Pelican for my personal blog because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I love Python;&lt;/li&gt;
&lt;li&gt;a static site seems appropriate for just linking to recent projects, book lists, and random thoughts (no complex user interfaces, no databases....yet); &lt;/li&gt;
&lt;li&gt;the documentation is pretty substantial (as a relatively new coder, this is essential);&lt;/li&gt;
&lt;li&gt;and unlike my company website, I wanted to build something from scratch.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-gist-of-pelican"&gt;The Gist of Pelican&lt;a class="headerlink" href="#the-gist-of-pelican" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pelican is, by definition, a static site generator. In a nutshell, what this means is that webpages are generated on my computer, pushed to a server, and then presented when accessed by someone on the internet. &lt;/p&gt;
&lt;p&gt;In contrast, a dynamic website has pages that are created in real-time as it is accessed by the user. This can include drawing data from a database, logging into apps, amongst other things. &lt;/p&gt;
&lt;h3 id="how-i-use-pelican"&gt;How I use Pelican&lt;a class="headerlink" href="#how-i-use-pelican" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have a folder that contains my content in the form of either markdown or html. Whenever I want to add a blog post, I start a new markdown file, add the necessary metadata, and start writing. &lt;/p&gt;
&lt;p&gt;Then I perform these commands to update my website, which is hosted by Github User pages.&lt;/p&gt;
&lt;p&gt;First, I save my changes to my 'source branch'.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; .
# &lt;span class="nv"&gt;stages&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;current&lt;/span&gt; &lt;span class="nv"&gt;changes&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt;

$&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;blog update&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
# &lt;span class="nv"&gt;commits&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;changes&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;repository&lt;/span&gt;, &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;blog update&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

$&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt;
# &lt;span class="nv"&gt;submits&lt;/span&gt; &lt;span class="nv"&gt;these&lt;/span&gt; &lt;span class="nv"&gt;committed&lt;/span&gt; &lt;span class="nv"&gt;changes&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;remote&lt;/span&gt; &lt;span class="nv"&gt;repository&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Since user pages only deploy from the 'master' branch in your repository, you can just push your source's 'output' folder to the master branch and your blog will be updated. A way to do this is:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="c1"&gt;# uses the pelican command with path to content (&amp;#39;content&amp;#39; here), to an output&lt;/span&gt;
&lt;span class="c1"&gt;# folder of &amp;#39;output&amp;#39;, using settings file &amp;#39;pelicanconf.py&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="c1"&gt;# githubpages import will update the master branch with contents of output &lt;/span&gt;
&lt;span class="c1"&gt;# from the remote origin&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="c1"&gt;# updates the the remote master branch, publishing the site&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Sources:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.getpelican.com/en/4.0.1/tips.html"&gt;https://docs.getpelican.com/en/4.0.1/tips.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ndpsoftware.com/git-cheatsheet.html#loc=workspace;"&gt;http://ndpsoftware.com/git-cheatsheet.html#loc=workspace;&lt;/a&gt; &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adriana</dc:creator><pubDate>Thu, 13 Jun 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2019-06-13:blog/2019/06/13/pelican-sites-and-creating-blogposts/</guid><category>Python</category><category>Pelican</category><category>Blogging</category></item><item><title>Modus Operandi</title><link>blog/2019/05/13/modus-operandi/</link><description>&lt;p&gt;I've always wanted a central location for notes on my projects for a while. When I worked in a lab, there was the almighty Lab Notebook. Covered in coffee stains, reagents, and goodness knows what else (don't ask I worked with mice 🐁) these notebooks were handwritten time capsules that contained little bits of your past. &lt;/p&gt;
&lt;p&gt;Going back and reading it most of the time is like: 'what the heck was I thinking, why did I ...' 🤷🏻‍♀️🤦🏻‍♀️&lt;/p&gt;
&lt;p&gt;Handwritten notebooks seem archiac at first. Passed down through centuries of scientists, it's required for good reason. &lt;/p&gt;
&lt;p&gt;You can't really move forward unless you learn from the (mistakes and deep analysis) of the past. &lt;/p&gt;
&lt;p&gt;Plus, what person can remember every. single. little. detail. &lt;/p&gt;
&lt;p&gt;Recently I've been feeling a common thread in my current work. Something I should keep record of.  &lt;/p&gt;
&lt;p&gt;I typically categorize the work by the time of day it's done: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;During the day I consult (mainly science-y stuff) for my business. It could be administrative nonsense, heavy research/writing, or compuational work. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the evenings I try to spend time on side projects, which currently is building a baking app. (The more delicious output of this project takes place on the weekends, which entails loads of actual baking in my kitchen.) &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, I want to document the 'backend', which primarily consists of programming, designing, and organizing, of the 'frontend' of my work, which is what people see: my genomics computational stuff, my analytics blog, my baking app. &lt;/p&gt;
&lt;p&gt;There is all this underlying computational/coding work of which I am largely self-taught. That means I make lots of mistakes. Like 99% of the time.  &lt;/p&gt;
&lt;p&gt;I'm learning as I go. I actually love (like really, love love love) learning but, it is something of a mixed blessing. I will forgo the timeline of a project if I can simply linger on a topic for a little while to make sure I understand every aspect of it. That's where this place comes in handy - sharing what I learned, what I messed up, how I fixed stuff.      &lt;/p&gt;
&lt;p&gt;My online Lab Notebook. With less mice.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adriana</dc:creator><pubDate>Mon, 13 May 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:None,2019-05-13:blog/2019/05/13/modus-operandi/</guid><category>Python</category><category>Pelican</category></item></channel></rss>